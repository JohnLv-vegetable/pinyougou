<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						 http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 设置不拦截部分 -->
	<http pattern="/*.html" security="none"></http>
	<http pattern="/css/**" security="none"></http>
	<http pattern="/img/**" security="none"></http>
	<http pattern="/js/**" security="none"></http>
	<http pattern="/plugins/**" security="none"></http>
	<!-- 开放商家申请入住的匿名访问 -->
	<http pattern="/seller/add.do" security="none"></http>
	


	<!-- 页面拦截规则    *use-expressions  是否启用SPEL表达式   (启用的话access中的值为hasRole("ROLE_USER"))-->
	<http use-expressions="false">
		<!-- 此处的（webxml中的是拦截所有 包括子目录）   /*  只拦截根目录下的 请求，  /** 拦截根目录及其子目录下的请求 
			*access   格式 ROLE_*
		
		 -->
		<!-- 当前用户必须有ROLE_USER的角色才可以访问根目录及其所属子目录的资源 -->
		<intercept-url pattern="/**" access="ROLE_SELLER" />
		<!-- 开启表达登录功能
			login-page					配置登录页面
			default-target-url			登录成功跳转页面
			authentication-failure-url	登录失败跳转页面
			always-use-default-target	 是否总是使用默认的登录成功后跳转url
		 -->
		<form-login  login-page="/shoplogin.html" 
		default-target-url="/admin/index.html" 
		authentication-failure-url="/shoplogin.html" 
		always-use-default-target="true" />
		<!-- CSRF（Cross-site request forgery）跨站请求伪造，
			也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，
			是一种对网站的恶意利用。 -->
		<csrf disabled="true"/>
		
		<!-- 配置允许加载，ifram 框架中的请求 -->
		<headers>
			<frame-options policy="SAMEORIGIN"/>
		</headers>
		<!-- 自动产生/logout地址  logout-success-url:注销后条状的页面(默认跳到登录页面)   logout-url:设置注销地址-->
		<logout />
	</http>
	<!-- 认证管理器  -->
	<authentication-manager>
		<authentication-provider user-service-ref="userDetailService">
			<!-- 配置密码加密后，登录时 进行密码匹配-->
			<password-encoder ref="passwordEncoder"></password-encoder>
		</authentication-provider>
	</authentication-manager>

	<!-- 认证实现类 -->
	<beans:bean id="userDetailService" class="com.pinyougou.service.UserDetailsServiceImpl">
		<!-- 配置sellerService ，因为service是 远端的， 在不同的工程下，需要配置dobbox方可访问， -->
		<beans:property name="sellerService" ref="sellerService"></beans:property>
	</beans:bean>
	
	<!-- 引用dubbo 服务 -->
	<dubbo:application name="pinyougou-shop-web" />
	<dubbo:registry address="zookeeper://192.168.25.128:2181"/>
	<dubbo:reference id="sellerService" interface="com.pinyougou.sellergoods.service.SellerService"></dubbo:reference>


	<!-- 配置密码加密后，登录时 进行密码匹配 ,同时在认证管理器中进行配置-->
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></beans:bean>



</beans:beans>